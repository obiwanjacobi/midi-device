Rules from the SoundDiver programming manual

* (older) SysEx may not end with F7. The appearance of another MIDI status byte (except real-time) indicate the end.
	+ Let the SysExStream handle that if needed. Does not impact the solution.

* Manufacturer Id (byte after SOX) can be one byte up to three bytes.
	+ important for message recognition. But for now lets assume manufacturer is known in advance.

* Transmission formats (how do I sent 8 bits in 7-bit bytes?)
	- Split Nibble: hi and lo nibbles are sent separately. Exist in LE/BE format.
		+ Currently only one nibble-packing format is impl. Might need a different way to address BE/LE of several types of data.
		  Involves injecting custom streams as well as manipulating bit sequences.
	- ACII Nibbles: Same as split nibble but the binary value is translated to an ascii char.
		+ Can be implemented as GroupConverter and transparently revert back to binary hex values.

	- 8x7-bit packed: the seventh bit of max 7 bytes is packed into the last byte (at resp. position).
		+ Impl. as GroupConverters that inject custom streams. Use width attribute to signal byte length smaller than 7 bytes.

	- 7 byte bit-field: all bits packed into a bit array and send as 7-bit bytes.
		+ Impl. as GroupConverter that unpack these bit arrays.

	- 1+ 7 bit packed: the 7-bit is send in bit0 of an extra byte. Exist in LE/BE format.
		+ DataConverter that reads two bytes. 

	* (n)* 7-bit (short/int) values: various ways exist to pass multi-byte values.
		+ DataConverters can implement any bit-stacking functionality needed.

* Checksum formats:
	- Checksums may work on physical midi stream bytes or logical (say before nibble split) values.
		+ We might need to inject a logic value container (similar to how Device Properties are now handled).
		  The Logic Value Container could also 'remember' values not used by the logical app. client.
	- Number of checksum bytes may vary from one to four.
		+ Each type of checksum calc. requires a custom DataConverter.
	- Checksums may be added to or subtracted from constant values (Kawai)
		+ The specific DataConverter will take care of that.
	- 2's complement: make checksum negative.
	- 1's complement: invert value

* Parameter (Field) values:
	-Bit field may also come in LE/BE. Bit0 could be most significant.
		+ As said earlier: we might need a generic way to indicate BE/LE on different data types.
	- Different ways of indicating a negative number:
		- 2's complement: invert all bits and add 1
		- neg sign bit (magnitude): one bit indicates a negative, remaining bits indicate number
		- constant field-specific offset: a value of 24 with offset 12 becomes 0
			+ this could be an attribute on a common DataType/DataConverter.

	- String values can be encoded:
		- ASCII. most use this.
			+ current StringConverter covers this.
		- Custom conversion table (need custom data type and converter).
			+ Requires a custom string converter.

*Parameter (Field) identification:
	- Address location
		+ Basic (Roland) address mapping is in-place.
	- Specialized message to change only on parameter (field).
		+ Either covered by address mapping or a specific message.
	- a mask is transmitted to mask out bits not part of the parameter value change.
		+ would be part of the specific message schema.
	- Might need to send PC's and CC's so select current banks/ sounds/patches.
		+ this is something that should be covered by the message exchange manager.

Manual Intervention	
* The user might need to perform some manual tasks in order to complete the data exchange.
	+ The message exchange manager should take this into account (vocabulary could provide localized text?).

Address Maps
* Max length to message (128 or 256 bytes).
	+ The message exchange manager should chop the field range up into fixed-size packets (device specific).
* A configurable delay is needed between sending packets.
	+ Configurable (device/message specific) in the message exchange manager.
* Roland uses 7-bit Hex address (and size) values. 
	+ Impl. in SevenBitUInt32

Message Handshake protocols
	+ The Message Exchange Manager is the leading part in this. Needs to be designed/developed further.
* not many implement it (Roland)
* Some implement it incompatible (Casio starts of with SysEx but sends plain data without Sysex compatibility. Will software drivers even receive that?)
* Other devices use a simple message exchange mechanism.
* Some devices do not function without.

